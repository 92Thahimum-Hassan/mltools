Index: additionalfiles.txt
===================================================================
--- additionalfiles.txt	(revision 0)
+++ additionalfiles.txt	(revision 94)
@@ -0,0 +1,3 @@
+# These are files that should be packaged for the mltools software
+dir: html
+~/mlprojects/mltools/html/index.html
Index: readme.txt
===================================================================
--- readme.txt	(revision 0)
+++ readme.txt	(revision 94)
@@ -0,0 +1,76 @@
+This toolbox provides various machine learning tools, either through wrapping other toolboxes (such as NETLAB) or providing the tool directly. It was designed originally as part of splitting the GPLVM and FGPLVM toolboxes.
+
+Version 0.1291
+--------------
+
+Changes to allow compatibility with SGPLVM and NCCA toolboxes.
+
+
+Version 0.129
+-------------
+
+Added dnet type model for GTM and density networks. Added various lvm helper files for doing nearest neighbour and plotting results for latent variable models. Added lmvu and mvu embedding wrapper. Added ppca model type. Added output gradients for model out functions (for magnification factor computation in dnet models). Added helpers for reading various models from FID mapmodel, matrix etc.).
+Added rbfOutputGradX and visualisation for spring dampers type.
+
+Version 0.128
+-------------
+
+Fixed Viterbi alignment algorithm, thanks to Raquel Urtasun for pointing out the problems with it.
+
+Carl Henrik Ek added embeddings with maximum variance unfolding (landmark and normal) to the toolbox. Also several files modified by Carl to allow a single output dimension of a model to be manipulated.
+
+Version 0.127
+-------------
+
+Minor modifications including adding file modelAddDynamics to replace fgplvmAddDynamics.
+
+Version 0.126
+-------------
+
+Modified kbrParamInit to scale alpha weights and biases by number of data. Added 'dynamicsSliderChange' to lvmClassVisualise to allow visulisation of models with 'gpTime' style-dynamics.
+
+Version 0.125
+-------------
+
+Added multimodel for learning multiple indepedent models with shared parameters.
+
+Version 0.124
+-------------
+
+Added model gradient checker and added rbfperiodic function to provide a length scale for the gibbsperiodic kernel.
+
+Version 0.123
+-------------
+
+Minor release in line with IVM toolbox 0.4.
+
+Version 0.122
+-------------
+
+Added Hessian code for base model type and for MLP. Added Viterbi alignment code, viterbiAlign.
+
+Version 0.121
+-------------
+
+Various minor bug fixes and changes which seem to have gone undocumented.
+
+Version 0.12
+------------
+
+Extended model type to be a generic container module for optimising any model. Added model test for testing a created model. The code is still in a bit of flux though with some design decisions not made and some code untested.
+
+Version 0.111
+-------------
+
+Fixed bug in kbr where bias parameter fields where still being referred to as b.Also acknowledged the fact that the isomap graph may not be fully connected in isomapEmbed, but don't yet deal with it properly. Finally added lleEmbed.m for wrapping the lle code.
+
+
+Version 0.11
+------------
+
+Updated release for operation with FGPLVM toolbox 0.13. Structure of model creation changed and functions of the form modelOptions.m included for setting default options of the various machine learning models.
+
+Version 0.1
+-----------
+
+The first release of the toolbox with various wrappers for NETLAB functions. Also latent variable model visualisation code was moved into this toolbox.
Index: modelOutputGrad.m
===================================================================
--- modelOutputGrad.m	(revision 24)
+++ modelOutputGrad.m	(working copy)
@@ -16,7 +16,7 @@
 % DESC gives the gradients of the outputs from the model with
 % respect to the parameters for a given set of inputs.
 % ARG model : the model structure for which gradients are computed.
-% ARG X : input locations where gradients are to be computed.
+% ARG X : input locations where gradients are to be comxfputed.
 % ARG dim : the dimension of the model for which gradients are required.
 % RETURN g : gradients of the model output with respect to the
 % model parameters for the given input locations. The size of the
Index: modelOut.m
===================================================================
--- modelOut.m	(revision 24)
+++ modelOut.m	(working copy)
@@ -24,7 +24,7 @@
 %
 % COPYRIGHT : Neil D. Lawrence, 2005, 2006
 %
-% MODIFICATIONS : Cark Henrik Ek, 2007
+% MODIFICATIONS : Cark Henrik Ek, 2008
 
 % MLTOOLS
 
@@ -33,4 +33,7 @@
   [Y, Phi] = fhandle(model, X, varargin{:});
 else
   Y = fhandle(model, X, varargin{:});
+end
+if(isfield(model,'indexOut')&&~isempty(model.indexOut))
+  Y(:,setdiff(1:1:size(Y,2),model.indexOut)) = NaN;
 end
\ No newline at end of file
Index: kbrOutputGrad.m
===================================================================
--- kbrOutputGrad.m	(revision 24)
+++ kbrOutputGrad.m	(working copy)
@@ -16,8 +16,9 @@
 % SEEALSO : kbrCreate, kbrderiv
 %
 % COPYRIGHT : Neil D. Lawrence, 2008
+%
+% MODIFICATIONS : Carl Henrik Ek, 2008
 
-
 % MLTOOLS
 
 numData = size(X, 1);
Index: kbrExpandParam.m
===================================================================
--- kbrExpandParam.m	(revision 24)
+++ kbrExpandParam.m	(working copy)
@@ -12,7 +12,9 @@
 % SEEALSO : kbrunpak, kbrCreate, kbrExtractParam
 %
 % COPYRIGHT : Neil D. Lawrence, 2008
-
+%
+% MODIFICATIONS : Carl Henrik Ek, 2008
+%
 % MLTOOLS
 
 if(nargin<3)
Index: modelOptimise.m
===================================================================
--- modelOptimise.m	(revision 24)
+++ modelOptimise.m	(working copy)
@@ -11,7 +11,7 @@
 %
 % COPYRIGHT : Neil D. Lawrence, 2006
 %
-% MODIFICATIONS : Cark Henrik Ek, 2007
+% MODIFICATIONS : Carl Henrik Ek, 2007
  
 % MLTOOLS
 
Index: dnetOptions.m
===================================================================
--- dnetOptions.m	(revision 94)
+++ dnetOptions.m	(working copy)
@@ -12,9 +12,10 @@
 % ARG latentPoints : number of latent points to use. If give as a vector,
 % layout is assumed to be a grid with rows and columns given by the vector.
 % ARG mappingOptions : the options for the mapping model.
-% RETURN options : default options structure for density network with the specified number of hidden units.
+% RETURN options : default options structure for density network with the
+% specified number of hidden units.
 %
-% SEEALSO : dnetCreate, mlpCreate, rbfCreate, kbrCreate
+% SEEALSO : dnetCreate, modelOptions
 %
 % COPYRIGHT : Neil D. Lawrence, 2008
 
Index: lvmScatterPlot.m
===================================================================
--- lvmScatterPlot.m	(revision 94)
+++ lvmScatterPlot.m	(working copy)
@@ -45,54 +45,56 @@
 
 x1 = linspace(min(model.X(:, 1))*1.1, max(model.X(:, 1))*1.1, 150);
 x2 = linspace(min(model.X(:, 2))*1.1, max(model.X(:, 2))*1.1, 150);
-[X1, X2] = meshgrid(x1, x2);
-XTest = [X1(:), X2(:)];
+funcStr = [model.type 'PosteriorMeanVar'];
+if exist(funcStr)==2
+  [X1, X2] = meshgrid(x1, x2);
+  XTest = [X1(:), X2(:)];
+  fhandle = str2func(funcStr);
+  if str2num(version('-release'))>13
+    [mu, varsigma] = fhandle(model, XTest);
+  else 
+    [mu, varsigma] = feval(fhandle, model, XTest);
+  end
+  
+  d = size(mu, 2);
+  if size(varsigma, 2) == 1
+    dataMaxProb = -0.5*d*log(varsigma);
+  else
+    dataMaxProb = -.5*sum(log(varsigma), 2);
+  end
+  
+  if isempty(ax)
+    figure(1)
+    clf
+    % Create the plot for the data
+    ax = axes('position', [0.05 0.05 0.9 0.9]);
+  else
+    axes(ax);
+  end
+  hold on
 
-%fhandle = str2func([model.type 'PosteriorMeanVar']);
-%if str2num(version('-release'))>13
-%  [mu, varsigma] = fhandle(model, XTest);
-%else 
-%  [mu, varsigma] = feval(fhandle, model, XTest);
-%end
-
-%d = size(mu, 2);
-%if size(varsigma, 2) == 1
-%  dataMaxProb = -0.5*d*log(varsigma);
-%else
-%  dataMaxProb = -.5*sum(log(varsigma), 2);
-%end
-
-if isempty(ax)
-  figure(1)
-  clf
-  % Create the plot for the data
-  ax = axes('position', [0.05 0.05 0.9 0.9]);
-else
-  axes(ax);
+  C = reshape(dataMaxProb, size(X1));
+  
+  % Rescale it
+  C = C - min(min(C));
+  if max(max(C))~=0
+    C = C/max(max(C));
+    C = round(C*63);
+    image(x1, x2, C);
+  end
+  
+  [c, h] = contourf(X1, X2, log10(reshape(1./varsigma(:, 1), size(X1))), 128); 
+  % shading flat
+  colormap gray;
+  %colorbar
 end
-hold on
-
-%C = reshape(dataMaxProb, size(X1));
-
-% Rescale it
-%C = C - min(min(C));
-%if max(max(C))~=0
-%  C = C/max(max(C));
-%  C = round(C*63);
-%  image(x1, x2, C);
-%end
-
-% [c, h] = contourf(X1, X2, log10(reshape(1./varsigma(:, 1), size(X1))), 128); 
-% shading flat
-colormap gray;
-%colorbar
 data = lvmTwoDPlot(model.X, YLbls, symbol);
 switch model.type
  case 'dnet'
   plot(model.X_u(:, 1), model.X_u(:, 2), 'g.')
 end
-xLim = [min(XTest(:, 1)) max(XTest(:, 1))];
-yLim = [min(XTest(:, 2)) max(XTest(:, 2))];
+xLim = [min(x1) max(x1)];
+yLim = [min(x2) max(x2)];
 set(ax, 'xLim', xLim);
 set(ax, 'yLim', yLim);
 
Index: lvmScatterPlotColor.m
===================================================================
--- lvmScatterPlotColor.m	(revision 94)
+++ lvmScatterPlotColor.m	(working copy)
@@ -1,6 +1,6 @@
 function [ax, data] = lvmScatterPlotColor(model, shade, ax);
 
-% LVMSCATTERPLOT 2-D scatter plot of the latent points with color.
+% LVMSCATTERPLOTCOLOR 2-D scatter plot of the latent points with color.
 % FORMAT
 % DESC produces a visualisation of the latent space with the given model 
 % using color shadings given, specifically written for the 'swiss roll data'.
@@ -12,17 +12,15 @@
 % DESC produces a visualisation of the latent space for the given model, 
 % using the provided labels to distinguish the latent points.
 % ARG model : the model for which the scatter plot is being produced.
-% ARG shade : color indicator for each data point so that they may be given different
-% colours.
+% ARG shade : colour indicator for each data point so that they may be given
+% different colours.
 % ARG ax : the axes where the plot is to be placed.
 % RETURN ax : the axes handle where the scatter plot was placed.
 %
-% COPYRIGHT : Neil D. Lawrence, 2004, 2005, 2006
+% COPYRIGHT : Neil D. Lawrence, 2004, 2005, 2006, 2008
 %
 % SEEALSO : fgplvmVisualise, lvmTwoDPlot, lvmScatterPlot
 
-% LVMSCATTERPLOTCOLOR 2-D scatter plot of the latent points with color - for Swiss Roll data.
-
 % MLTOOLS
 
 if nargin < 3
@@ -32,55 +30,71 @@
 shade = shade - min(shade)+eps;
 shade = shade/max(shade);
 shade = ceil(shade*64);
+
 x1 = linspace(min(model.X(:, 1))*1.1, max(model.X(:, 1))*1.1, 30);
 x2 = linspace(min(model.X(:, 2))*1.1, max(model.X(:, 2))*1.1, 30);
-[X1, X2] = meshgrid(x1, x2);
-XTest = [X1(:), X2(:)];
 
-fhandle = str2func([model.type 'PosteriorMeanVar']);
-if str2num(version('-release'))>13
-  [mu, varsigma] = fhandle(model, XTest);
-else 
-  [mu, varsigma] = feval(fhandle, model, XTest);
-end
+funcStr = [model.type 'PosteriorMeanVar'];
+if exist(funcStr)==2
+  [X1, X2] = meshgrid(x1, x2);
+  XTest = [X1(:), X2(:)];
+  
+  fhandle = str2func([model.type 'PosteriorMeanVar']);
+  if str2num(version('-release'))>13
+    [mu, varsigma] = fhandle(model, XTest);
+  else 
+    [mu, varsigma] = feval(fhandle, model, XTest);
+  end
+  
+  d = size(mu, 2);
+  if size(varsigma, 2) == 1
+    dataMaxProb = -0.5*d*log(varsigma);
+  else
+    dataMaxProb = -.5*sum(log(varsigma), 2);
+  end
+  
+  if isempty(ax)
+    figure(1)
+    clf
+    % Create the plot for the data
+    ax = axes('position', [0.05 0.05 0.9 0.9]);
+  else
+    axes(ax);
+  end
+  hold on
 
-if isempty(ax)
+  C = reshape(dataMaxProb, size(X1));
+  
+  % Rescale it
+  C = C - min(min(C));
+  if max(max(C))~=0
+    C = C/max(max(C));
+    C = round(C*63);
+    image(x1, x2, C);
+  end
+  
+  [c, h] = contourf(X1, X2, log10(reshape(1./varsigma(:, 1), size(X1))), 128); 
+  colormap gray;
+  
+  
   figure(1)
   clf
-  % Create the plot for the data
-  ax = axes('position', [0.05 0.05 0.9 0.9]);
-else
-  axes(ax);
+  shading flat
+  gr = colormap('gray');
+  set(h, 'CDataMapping', 'direct')
+  for i = 1:length(h)
+    set(h(i), 'cdata', i);
+  end
+  %colorbar
 end
-hold on
-
-C = log10(reshape(1./varsigma(:, 1), size(X1)));
-C = C - min(min(C));
-C = C/max(max(C));
-C = round(C*63);
-image(x1, x2, C);
-
-  
-figure(1)
-clf
-shading flat
 jt = colormap('jet');
-gr = colormap('gray');
-set(h, 'CDataMapping', 'direct')
-for i = 1:length(h)
-  set(h(i), 'cdata', i);
-end
-%colorbar
 data = lvmTwoDPlot(model.X);
-%for i = 1:length(h)
-%  set(h(i), 'facecolor', map(i, :));
-%  set(h(i), 'edgecolor', map(i, :));
-%end
+
 for i=1:length(data)
   set(data(i), 'color', jt(shade(i), :));
 end
-xLim = [min(XTest(:, 1)) max(XTest(:, 1))];
-yLim = [min(XTest(:, 2)) max(XTest(:, 2))];
+xLim = [min(x1) max(x1)];
+yLim = [min(x2) max(x2)];
 set(ax, 'xLim', xLim);
 set(ax, 'yLim', yLim);
 
Index: dnetCreate.m
===================================================================
--- dnetCreate.m	(revision 94)
+++ dnetCreate.m	(working copy)
@@ -3,12 +3,12 @@
 % DNETCREATE Density network model.
 % FORMAT
 % DESC creates a structure for a density network.
-% ARG inputDimension : dimension of input data.
-% ARG outputDim : dimension of target data.
+% ARG inputDimension : dimension of latent data.
+% ARG outputDim : dimension of observed data.
 % ARG Y : the data to be modelled in design matrix format (as many
 % rows as there are data points).
 % ARG options : options structure as returned by dnetCreate.
-% RETURN model : model structure containing the neural network
+% RETURN model : model structure containing the density network
 % specified.
 % 
 % COPYRIGHT : Neil D. Lawrence, 2008
Index: lvmTwoDPlot.m
===================================================================
--- lvmTwoDPlot.m	(revision 94)
+++ lvmTwoDPlot.m	(working copy)
@@ -32,27 +32,28 @@
 axisHand = gca;
 returnVal = [];
 nextPlot = get(axisHand, 'nextplot');
-if ~isempty(lbl)
-  for i = 1:size(X, 1)
-    if i == 2
-      set(axisHand, 'nextplot', 'add');
-    end
+for i = 1:size(X, 1)
+  if i == 2
+    set(axisHand, 'nextplot', 'add');
+  end
+  if ~isempty(lbl)
     labelNo = find(lbl(i, :));
-    try 
-      returnVal = [returnVal; plot(X(i, 1), X(i, 2), symbol{labelNo})];
-    catch
-      if strcmp(lasterr, 'Index exceeds matrix dimensions.')
-	error(['Only ' num2str(length(symbol)) ' labels supported (it''s easy to add more!)'])
+  else
+    labelNo = 1;
+  end
+  try 
+    returnVal = [returnVal; plot(X(i, 1), X(i, 2), symbol{labelNo})];
+    if connect
+      if i>1
+        line([X(i-1, 1) X(i, 1)], [X(i-1, 2) X(i, 2)]);
       end
     end
+  catch
+    if strcmp(lasterr, 'Index exceeds matrix dimensions.')
+      error(['Only ' num2str(length(symbol)) ' labels supported (it''s easy to add more!)'])
+    end
   end
-  set(axisHand, 'nextplot', nextPlot);
-else
-  if connect
-    returnVal = plot(X(:, 1), X(:, 2), 'rx-');
-  else
-    returnVal = plot(X(:, 1), X(:, 2), 'rx');
-  end
 end
+set(axisHand, 'nextplot', nextPlot);
 set(returnVal, 'markersize', 10);
 set(returnVal, 'linewidth', 2);
\ No newline at end of file
Index: mltoolsToolboxes.m
===================================================================
--- mltoolsToolboxes.m	(revision 94)
+++ mltoolsToolboxes.m	(working copy)
@@ -6,4 +6,5 @@
 importLatest('mvu');
 importLatest('lmvu');
 importLatest('lle');
+importLatest('jdqr');
 importLatest('isomap');
\ No newline at end of file
